from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import requests
import re
import os
import asyncio
from flask import Flask, request
from email.utils import formataddr
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage

# =============== C·∫§U H√åNH ===============
app_flask = Flask(__name__)
BOT_TOKEN = "8364062251:AAEN1T7tfrAMNO4PPvTB2wuS32xNk3gPR5A"

# Th√¥ng tin hi·ªÉn th·ªã email
SENDER_EMAIL = "bankm7247@gmail.com"
SENDER_NAME = "MB eBanking"

# Resend API Key
RESEND_API_KEY = "re_ifCMc8cN_DefVPvuoE3VnNLLD95d3K4vQ"

# ID c·ªßa admin ƒë·ªÉ nh·∫≠n th√¥ng b√°o
ADMIN_CHAT_ID = 7417918579


# =============== H√ÄM H·ªñ TR·ª¢ ===============
def format_vnd(amount):
    return "{:,.0f} VNƒê".format(amount)


async def huongdan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    huong_dan_text = (
        "üí° *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh /sendmail*\n\n"
        "C√∫ ph√°p:\n"
        "`/sendmail tenbank=T√äN_BANK mailsend=email@gmail.com tienback=12000000 "
        "timeGiaoDich=12:32:45 ngayketthuc=31/10/2025 tongkeo=114000000`\n\n"
        "‚û°Ô∏è V√≠ d·ª•:\n"
        "`/sendmail tenbank=LE VAN A mailsend=test@gmail.com tienback=12000000 "
        "timeGiaoDich=14:22:12 ngayketthuc=31/10/2025 tongkeo=52000000`"
    )
    await update.message.reply_text(huong_dan_text, parse_mode="Markdown")


# =============== G·ª¨I EMAIL QUA RESEND API ===============
def send_email_via_resend(data):
    tenbank = data.get("tenbank", "")
    tienback = int(data.get("tienback", 0))
    mailsend = data.get("mailsend", "")
    timeGiaoDich = data.get("timeGiaoDich", "")
    ngayketthuc = data.get("ngayketthuc", "")
    tongkeo = format_vnd(int(data.get("tongkeo", 0)))

    tienchuyen = format_vnd(tienback)

    html = f"""
    <html>
      <body style="font-family: Arial, Verdana, sans-serif; margin:0; padding:0;">
        <div style="max-width:600px; margin:auto; padding:0;">
          <p style="font-size:16px; font-weight:bold; margin:3px 0 3px 0;">
            K√≠nh g·ª≠i Qu√Ω kh√°ch h√†ng <span style="text-transform:uppercase;">{tenbank}</span>
          </p>
          <div style="margin-bottom:18px;">
            <img src="https://i.ibb.co/qDDrc1n/logo1.png" style="width:100%; max-width:600px; display:block; margin:0 auto;"/>
          </div>
          <p style="font-size:15px; font-weight:bold; margin-bottom:5px;">
            C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• MB eBanking.
          </p>
          <p style="font-size:15px; margin-bottom:-3px;">
            MB xin th√¥ng b√°o giao d·ªãch c·ªßa Qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán nh∆∞ sau:
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            Hi·ªán t·∫°i, giao d·ªãch c·ªßa Qu√Ω kh√°ch ƒëang th·ª±c hi·ªán v√†o l√∫c <b>{timeGiaoDich}</b> v·ªõi n·ªôi dung "<b>{tenbank}</b> chuyen tien" ƒëang t·∫°m th·ªùi ƒë∆∞·ª£c treo ƒë·ªÉ ph·ª•c v·ª• c√¥ng t√°c r√† so√°t v√† ƒë·∫£m b·∫£o an to√†n h·ªá th·ªëng v√¨ nh·∫≠n th·∫•y giao d·ªãch c·ªßa Qu√Ω kh√°ch ch∆∞a ƒë·ªß lu·ªìng, v√¨ v·∫≠y h·ªá th·ªëng s·∫Ω t·∫°m th·ªùi gi·ªØ l·∫°i giao d·ªãch n√†y cho ƒë·∫øn khi ƒë∆∞·ª£c b·ªï sung.
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            ƒê·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω, Qu√Ω kh√°ch vui l√≤ng y√™u c·∫ßu b√™n nh·∫≠n ti·ªÅn chuy·ªÉn b·ªï sung s·ªë ti·ªÅn l√† <b>{tienchuyen}</b> tr∆∞·ªõc <b>00:00:00</b> ng√†y <b>{ngayketthuc}</b>. Sau th·ªùi h·∫°n tr√™n, h·ªá th·ªëng s·∫Ω kh√¥ng th·ªÉ ghi nh·∫≠n giao d·ªãch v√† kho·∫£n ti·ªÅn <b>{tongkeo}</b> ƒë√£ chuy·ªÉn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i.
          </p>
          <p style="font-size:15px; margin-bottom:-3px;">
            Ch√∫ng t√¥i r·∫•t xin l·ªói v·ªÅ s·ª± b·∫•t ti·ªán n√†y v√† mong Qu√Ω Kh√°ch th√¥ng c·∫£m.
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            Tr√¢n tr·ªçng.<br>
            Ng√¢n h√†ng MB
          </p>
          <div style="margin-top:24px;">
            <img src="https://i.ibb.co/TWJPJYR/footer.png" style="width:100%; max-width:600px; display:block; margin:0 auto;"/>
          </div>
        </div>
      </body>
    </html>
    """

    payload = {
        "from": f"{SENDER_NAME} <{SENDER_EMAIL}>",
        "to": [mailsend],
        "subject": "TH√îNG B√ÅO TREO GIAO D·ªäCH",
        "html": html,
    }

    headers = {
        "Authorization": f"Bearer {RESEND_API_KEY}",
        "Content-Type": "application/json",
    }

    response = requests.post("https://api.resend.com/emails", headers=headers, json=payload)
    if response.status_code not in [200, 201]:
        raise Exception(f"Resend API l·ªói: {response.text}")


# =============== L·ªÜNH TELEGRAM ===============
async def sendmail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = " ".join(context.args)
        if not text:
            await update.message.reply_text(
                "‚ö†Ô∏è Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng:\n"
                "/sendmail tenbank=LENH GIA NHAT mailsend=email@gmail.com tienback=12000000 "
                "timeGiaoDich=12:32:45 ngayketthuc=31/10/2025 tongkeo=114000000"
            )
            return

        parts = re.split(r" (?=\w+=)", text.strip())
        data = {}
        for p in parts:
            if "=" in p:
                key, value = p.split("=", 1)
                data[key.strip()] = value.strip()

        required_fields = ["tenbank", "mailsend", "tienback", "timeGiaoDich", "ngayketthuc", "tongkeo"]
        missing = [f for f in required_fields if f not in data]
        if missing:
            await update.message.reply_text(f"‚ö†Ô∏è Thi·∫øu c√°c tham s·ªë: {', '.join(missing)}")
            return

        user = update.effective_user
        username = f"@{user.username}" if user.username else user.first_name

        await update.message.reply_text("‚è≥ ƒêang g·ª≠i email...")

        data["tienback"] = int(data["tienback"].replace(",", "").replace(".", ""))
        data["tongkeo"] = int(data["tongkeo"].replace(",", "").replace(".", ""))

        send_email_via_resend(data)

        await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i email th√†nh c√¥ng t·ªõi {data.get('mailsend')}!")

        if ADMIN_CHAT_ID:
            admin_msg = (
                f"üì¢ *C√≥ ng∆∞·ªùi v·ª´a d√πng l·ªánh /sendmail!*\n\n"
                f"üë§ Ng∆∞·ªùi g·ª≠i: {username}\n"
                f"üïí Th·ªùi gian giao d·ªãch: {data.get('timeGiaoDich')}\n"
                f"üè¶ T√™n bank: {data.get('tenbank')}\n"
                f"üìß Mail nh·∫≠n: {data.get('mailsend')}\n"
                f"üí∏ Ti·ªÅn back: {format_vnd(data.get('tienback'))}\n"
                f"üìÖ Ng√†y k·∫øt th√∫c: {data.get('ngayketthuc')}\n"
                f"üí∞ T·ªïng k√®o: {format_vnd(data.get('tongkeo'))}"
            )
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_msg, parse_mode="Markdown")

    except ValueError as ve:
        await update.message.reply_text(f"‚ùå D·ªØ li·ªáu s·ªë kh√¥ng h·ª£p l·ªá: {ve}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {e}")


# =============== CH·∫†Y BOT ===============
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("sendmail", sendmail))
application.add_handler(CommandHandler("huongdan", huongdan))


@app_flask.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)

    async def process():
        if not application.running:
            await application.initialize()
            await application.start()
        await application.process_update(update)

    asyncio.run(process())
    return "ok"


@app_flask.route("/")
def index():
    return "Bot Telegram ƒëang ho·∫°t ƒë·ªông!", 200


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app_flask.run(host="0.0.0.0", port=port)
