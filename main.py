from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formataddr
from email.mime.image import MIMEImage
import re
import os

# =============== C·∫§U H√åNH ===============
BOT_TOKEN = "8402600514:AAFD1IbsPCRJBkTD9xa5XEY3EKcib9i4cCc"
SENDER_EMAIL = "bankm7247@gmail.com"
SENDER_NAME = "MB eBanking"
PASSWORD = "jvsk apqd udzn unaf"

ADMIN_CHAT_ID = 7417918579 

# =============== H√ÄM H·ªñ TR·ª¢ ===============
def format_vnd(amount):
    return "{:,.0f} VNƒê".format(amount)


async def huongdan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    huong_dan_text = (
        "üí° *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh /sendmail*\n\n"
        "C√∫ ph√°p:\n"
        "`/sendmail tenbank=T√äN_BANK mailsend=email@gmail.com tienback=12000000 "
        "timeGiaoDich=12:32:45 ngayketthuc=31/10/2025 tongkeo=114000000`\n\n"
        "‚û°Ô∏è V√≠ d·ª•:\n"
        "`/sendmail tenbank=LE VAN A mailsend=test@gmail.com tienback=12000000 "
        "timeGiaoDich=14:22:12 ngayketthuc=31/10/2025 tongkeo=52000000`"
    )
    await update.message.reply_text(huong_dan_text, parse_mode="Markdown")


async def send_email(data):
    tenbank = data.get("tenbank", "")
    tienback = int(data.get("tienback", 0))
    mailsend = data.get("mailsend", "")
    timeGiaoDich = data.get("timeGiaoDich", "")
    ngayketthuc = data.get("ngayketthuc", "")
    tongkeo = format_vnd(int(data.get("tongkeo", 0)))

    message = MIMEMultipart("related")
    message["Subject"] = "TH√îNG B√ÅO TREO GIAO D·ªäCH"
    message["From"] = formataddr((SENDER_NAME, SENDER_EMAIL))
    message["To"] = mailsend

    tienchuyen = format_vnd(tienback)

    html = f"""
    <html>
      <body style="font-family: Arial, Verdana, sans-serif; margin:0; padding:0;">
        <div style="max-width:600px; margin:auto; padding:0;">
          <p style="font-size:16px; font-weight:bold; margin:3px 0 3px 0;">
            K√≠nh g·ª≠i Qu√Ω kh√°ch h√†ng <span style="text-transform:uppercase;">{tenbank}</span>
          </p>
          <div style="margin-bottom:18px;">
            <img src="cid:logo1" style="width:100%; max-width:600px; display:block; margin:0 auto;"/>
          </div>
          <p style="font-size:15px; font-weight:bold; margin-bottom:5px;">
            C·∫£m ∆°n Qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• MB eBanking.
          </p>
          <p style="font-size:15px; margin-bottom:-3px;">
            MB xin th√¥ng b√°o giao d·ªãch c·ªßa Qu√Ω kh√°ch ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán nh∆∞ sau:
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            Hi·ªán t·∫°i, giao d·ªãch c·ªßa Qu√Ω kh√°ch ƒëang th·ª±c hi·ªán v√†o l√∫c <b>{timeGiaoDich}</b> v·ªõi n·ªôi dung "<b>{tenbank}</b> chuyen tien" ƒëang t·∫°m th·ªùi ƒë∆∞·ª£c treo ƒë·ªÉ ph·ª•c v·ª• c√¥ng t√°c r√† so√°t v√† ƒë·∫£m b·∫£o an to√†n h·ªá th·ªëng v√¨ nh·∫≠n th·∫•y giao d·ªãch c·ªßa Qu√Ω kh√°ch ch∆∞a ƒë·ªß lu·ªìng, v√¨ v·∫≠y h·ªá th·ªëng s·∫Ω t·∫°m th·ªùi gi·ªØ l·∫°i giao d·ªãch n√†y cho ƒë·∫øn khi ƒë∆∞·ª£c b·ªï sung.
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            ƒê·ªÉ ti·∫øp t·ª•c x·ª≠ l√Ω, Qu√Ω kh√°ch vui l√≤ng y√™u c·∫ßu b√™n nh·∫≠n ti·ªÅn chuy·ªÉn b·ªï sung s·ªë ti·ªÅn l√† <b>{tienchuyen}</b> tr∆∞·ªõc <b>00:00:00</b> ng√†y <b>{ngayketthuc}</b>. Sau th·ªùi h·∫°n tr√™n, h·ªá th·ªëng s·∫Ω kh√¥ng th·ªÉ ghi nh·∫≠n giao d·ªãch v√† kho·∫£n ti·ªÅn <b>{tongkeo}</b> ƒë√£ chuy·ªÉn s·∫Ω ƒë∆∞·ª£c ho√†n l·∫°i.
          </p>
          <p style="font-size:15px; margin-bottom:-3px;">
            Ch√∫ng t√¥i r·∫•t xin l·ªói v·ªÅ s·ª± b·∫•t ti·ªán n√†y v√† mong Qu√Ω Kh√°ch th√¥ng c·∫£m.
          </p>
          <p style="font-size:15px; margin-bottom:10px;">
            Tr√¢n tr·ªçng.<br>
            Ng√¢n h√†ng MB
          </p>
          <div style="margin-top:24px;">
            <img src="cid:footer" style="width:100%; max-width:600px; display:block; margin:0 auto;"/>
          </div>
        </div>
      </body>
    </html>
    """

    message.attach(MIMEText(html, "html", "utf-8"))

    try:
        with open("image/logo1.png", "rb") as img:
            logo = MIMEImage(img.read())
            logo.add_header("Content-ID", "<logo1>")
            logo.add_header("Content-Disposition", "inline", filename="logo1.png")
            message.attach(logo)

        with open("image/footer.png", "rb") as img:
            footer = MIMEImage(img.read())
            footer.add_header("Content-ID", "<footer>")
            footer.add_header("Content-Disposition", "inline", filename="footer.png")
            message.attach(footer)
    except FileNotFoundError:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y logo/footer.")

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(SENDER_EMAIL, PASSWORD)
        server.sendmail(SENDER_EMAIL, mailsend, message.as_string())


# =============== L·ªÜNH TELEGRAM ===============
async def sendmail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = " ".join(context.args)
        if not text:
            await update.message.reply_text(
                "‚ö†Ô∏è Vui l√≤ng nh·∫≠p l·ªánh ƒë√∫ng ƒë·ªãnh d·∫°ng:\n"
                "/sendmail tenbank=LENH GIA NHAT mailsend=email@gmail.com tienback=12000000 "
                "timeGiaoDich=12:32:45 ngayketthuc=31/10/2025 tongkeo=114000000"
            )
            return

        # Parse key=value
        parts = re.split(r" (?=\w+=)", text.strip())
        data = {}
        for p in parts:
            if "=" in p:
                key, value = p.split("=", 1)
                data[key.strip()] = value.strip()

        required_fields = ["tenbank", "mailsend", "tienback", "timeGiaoDich", "ngayketthuc", "tongkeo"]
        missing = [f for f in required_fields if f not in data]
        if missing:
            await update.message.reply_text(f"‚ö†Ô∏è Thi·∫øu c√°c tham s·ªë: {', '.join(missing)}")
            return

        user = update.effective_user
        username = f"@{user.username}" if user.username else user.first_name

        await update.message.reply_text("‚è≥ ƒêang g·ª≠i email...")
        data["tienback"] = int(data["tienback"].replace(",", "").replace(".", ""))
        data["tongkeo"] = int(data["tongkeo"].replace(",", "").replace(".", ""))
        await send_email(data)

        await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i email th√†nh c√¥ng t·ªõi {data.get('mailsend')}!")

        # üì® G·ª≠i th√¥ng b√°o ri√™ng cho Admin
        if ADMIN_CHAT_ID:
            admin_msg = (
                f"üì¢ *C√≥ ng∆∞·ªùi v·ª´a d√πng l·ªánh /sendmail!*\n\n"
                f"üë§ Ng∆∞·ªùi g·ª≠i: {username}\n"
                f"üïí Th·ªùi gian giao d·ªãch: {data.get('timeGiaoDich')}\n"
                f"üè¶ T√™n bank: {data.get('tenbank')}\n"
                f"üìß Mail nh·∫≠n: {data.get('mailsend')}\n"
                f"üí∏ Ti·ªÅn back: {format_vnd(data.get('tienback'))}\n"
                f"üìÖ Ng√†y k·∫øt th√∫c: {data.get('ngayketthuc')}\n"
                f"üí∞ T·ªïng k√®o: {format_vnd(data.get('tongkeo'))}"
            )
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_msg, parse_mode="Markdown")

    except ValueError as ve:
        await update.message.reply_text(f"‚ùå D·ªØ li·ªáu s·ªë kh√¥ng h·ª£p l·ªá: {ve}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói: {e}")


# =============== CH·∫†Y BOT ===============
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("sendmail", sendmail))
app.add_handler(CommandHandler("huongdan", huongdan))

print("üöÄ Bot ƒëang ch·∫°y...")
app.run_polling()
